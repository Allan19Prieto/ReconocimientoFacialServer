@page "/register-camera"
@using System.Data.SQLite;
@using ReconocimientoFacialServer.Data
@using ReconocimientoFacialServer.Models
@using ReconocimientoFacialServer.Services
@using SkiaSharp;
@using System.Drawing;
@using System.Text.Json;
@inject DatabaseHandler DatabaseHandler
@inject FaceRecognizerService FaceRecognizerService
@inject IJSRuntime JSRuntime

<h3>Registro de Usuario</h3>
<div>
    <label>Nombre:</label>
    <input @bind="UserName" />
</div>

<div>
    <video id="videoElement" autoplay style="border: 1px solid black; width: 320px; height: 240px;"></video>
    <canvas id="canvasElement" style="display: none;" width="320" height="240"></canvas>
</div>

<button @onclick="StartCamera">Iniciar Cámara</button>
<button @onclick="CaptureImage" disabled="@(string.IsNullOrWhiteSpace(UserName))">Capturar Imagen</button>

@if (Steps.Count > CurrentStep)
{
    <p><strong>Paso Actual:</strong> @Steps[CurrentStep].Instruction</p>
}

@if (CapturedImages.Any())
{
    <h4>Imágenes Capturadas:</h4>
    <div style="display: flex; flex-wrap: wrap;">
        @foreach (var image in CapturedImages)
        {
            <div style="margin: 5px;">
                <img src="@image.ImageBase64" style="width: 100px; height: 100px; border: 1px solid black;" />
                <p>@image.Condition - @image.Expression</p>
            </div>
        }
    </div>

    <h4>Descriptores Generados:</h4>
    <pre>@JsonSerializer.Serialize(CapturedDescriptors, new JsonSerializerOptions { WriteIndented = true })</pre>
}

<button @onclick="RegisterUser" disabled="@(CapturedImages.Count < Steps.Count)">Registrar Usuario</button>


<p style="color: @(ErrorMessage != null ? "red" : "green")">@ErrorMessage</p>


@code {
    //private UserModel User = new();
    private string? UserName;
    private string? ErrorMessage;

    private int CurrentStep = 0;
    private List<CapturedImage> CapturedImages = new();
    private List<float[]> CapturedDescriptors = new();

    private List<StepInstruction> Steps = new()
    {
        new StepInstruction { Instruction = "Mire hacia la cámara con luz normal.", Condition = "Luz normal", Expression = "Neutral" },
        new StepInstruction { Instruction = "Sonría y mire hacia la cámara.", Condition = "Luz normal", Expression = "Sonrisa" },
        new StepInstruction { Instruction = "Mire hacia la cámara con luz tenue.", Condition = "Luz baja", Expression = "Neutral" },
        new StepInstruction { Instruction = "Sonría bajo luz tenue.", Condition = "Luz baja", Expression = "Sonrisa" }
    };

    private class CapturedImage
    {
        public string ImageBase64 { get; set; } = string.Empty;
        public string Condition { get; set; } = string.Empty;
        public string Expression { get; set; } = string.Empty;
    }

    private class StepInstruction
    {
        public string Instruction { get; set; } = string.Empty;
        public string Condition { get; set; } = string.Empty;
        public string Expression { get; set; } = string.Empty;
    }

    // Iniciar la cámara
    private async Task StartCamera()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("startCamera", "videoElement");
            ErrorMessage = "Cámara iniciada correctamente.";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error al iniciar la cámara: {ex.Message}";
        }
    }

    private async Task CaptureImage()
    {
        if (CurrentStep >= Steps.Count)
        {
            ErrorMessage = "Todos los pasos han sido completados.";
            return;
        }

        try
        {
            // Capturar imagen desde el video
            var base64Image = await JSRuntime.InvokeAsync<string>("captureImage", "videoElement", "canvasElement");

            // Convertir Base64 a Dlib Matrix
            var imageMatrix = FaceRecognizerService.ConvertBase64ToMatrix(base64Image);

            // Detectar rostros
            var faces = FaceRecognizerService.DetectFaces(imageMatrix);
            if (!faces.Any())
            {
                ErrorMessage = "No se detectó ningún rostro.";
                return;
            }

            // Calcular descriptor para el primer rostro detectado
            var descriptors = FaceRecognizerService.ComputeDescriptors(imageMatrix, faces).FirstOrDefault();
            if (descriptors == null)
            {
                ErrorMessage = "No se pudo generar el descriptor del rostro.";
                return;
            }

            // Guardar la imagen y el descriptor
            CapturedImages.Add(new CapturedImage
                {
                    ImageBase64 = base64Image,
                    Condition = Steps[CurrentStep].Condition,
                    Expression = Steps[CurrentStep].Expression
                });
            CapturedDescriptors.Add(descriptors);

            ErrorMessage = null; // Limpiar errores
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error al capturar la imagen: {ex.Message}";
        }
    }

    private async Task RegisterUser()
    {
        if (string.IsNullOrWhiteSpace(UserName))
        {
            ErrorMessage = "El nombre del usuario es obligatorio.";
            return;
        }

        try
        {
            using var connection = DatabaseHandler.GetConnection();
            await connection.OpenAsync();

            // Insertar usuario
            string insertUserQuery = @"INSERT INTO Users (Name, RegisteredDate) VALUES (@Name, @RegisteredDate); SELECT last_insert_rowid();";
            using var userCommand = new SQLiteCommand(insertUserQuery, connection);
            userCommand.Parameters.AddWithValue("@Name", UserName);
            userCommand.Parameters.AddWithValue("@RegisteredDate", DateTime.Now);
            var userId = (long)await userCommand.ExecuteScalarAsync();

            // Insertar imágenes y descriptores
            foreach (var (image, descriptor) in CapturedImages.Zip(CapturedDescriptors, (img, desc) => (img, desc)))
            {
                byte[] imageBytes = Convert.FromBase64String(image.ImageBase64.Replace("data:image/png;base64,", ""));
                byte[] descriptorBytes = JsonSerializer.SerializeToUtf8Bytes(descriptor);

                string insertImageQuery = @"INSERT INTO UserImages (UserId, Image, LightingCondition, Expression) VALUES (@UserId, @Image, @Condition, @Expression);";
                using var imageCommand = new SQLiteCommand(insertImageQuery, connection);
                imageCommand.Parameters.AddWithValue("@UserId", userId);
                imageCommand.Parameters.AddWithValue("@Image", imageBytes);
                imageCommand.Parameters.AddWithValue("@Condition", image.Condition);
                imageCommand.Parameters.AddWithValue("@Expression", image.Expression);
                await imageCommand.ExecuteNonQueryAsync();

                string insertDescriptorQuery = @"INSERT INTO FaceDescriptors (UserId, Descriptor) VALUES (@UserId, @Descriptor);";
                using var descriptorCommand = new SQLiteCommand(insertDescriptorQuery, connection);
                descriptorCommand.Parameters.AddWithValue("@UserId", userId);
                descriptorCommand.Parameters.AddWithValue("@Descriptor", descriptorBytes);
                await descriptorCommand.ExecuteNonQueryAsync();
            }

            ErrorMessage = "Usuario registrado correctamente.";
            Reset();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error al registrar al usuario: {ex.Message}";
        }
    }



    
   
    private void SaveDescriptorToDatabase(double[] descriptor)
    {
        using var connection = DatabaseHandler.GetConnection();
        connection.Open();

        string query = @"
            INSERT INTO FaceDescriptors (UserId, Descriptor)
            VALUES (@UserId, @Descriptor);";

        using var command = new SQLiteCommand(query, connection);
        command.Parameters.AddWithValue("@UserId", 1); // Reemplaza con el ID del usuario actual
        command.Parameters.AddWithValue("@Descriptor", descriptor);

        command.ExecuteNonQuery();
    }

 
    private void CancelRegistration()
    {
        Reset(); // Reiniciar el formulario si el usuario cancela
    }

    private void Reset()
    {
        UserName = null;
        CapturedImages.Clear();
        CapturedDescriptors.Clear();
        CurrentStep = 0;
    }

    private string GetMessageColor(string message)
    {
        return message.StartsWith("Error") ? "red" : "green";
    }
}
