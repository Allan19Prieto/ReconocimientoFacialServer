@page "/register-camera"
@using System.Data.SQLite;
@using ReconocimientoFacialServer.Data
@using ReconocimientoFacialServer.Models
@using ReconocimientoFacialServer.Services
@inject DatabaseHandler DatabaseHandler
@inject FaceRecognizerService FaceRecognizerService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Registrar Usuario con Cámara</h3>

<div>
    <label>Nombre:</label>
    <input @bind="User.Name" />
</div>
<div>
    <label>Apellido:</label>
    <input @bind="User.LastName" />
</div>
<div>
    <label>Email:</label>
    <input @bind="User.Email" />
</div>

<div>
    <video id="videoElement" autoplay style="border: 1px solid black; width: 320px; height: 240px;"></video>
    <canvas id="canvasElement" style="display: none;" width="320" height="240"></canvas>
    @if (!string.IsNullOrWhiteSpace(ImagePreview))
    {
        <img src="@ImagePreview" alt="Imagen Capturada" />
    }
</div>

@if (!string.IsNullOrWhiteSpace(StatusMessage))
{
    <p>@StatusMessage</p>
}

<button @onclick="StartCamera">Iniciar Cámara</button>
<button @onclick="CaptureImage">Capturar Imagen</button>
<button @onclick="RegisterUser">Guardar Usuario</button>

@code {
    private UserModel User = new();
    private string? ImagePreview; // Imagen procesada para previsualización
    private string? StatusMessage; // Mensajes para el usuario

    // Iniciar la cámara
    private async Task StartCamera()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("startCamera", "videoElement");
            StatusMessage = "Cámara iniciada correctamente.";
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error al iniciar la cámara: {ex.Message}";
        }
    }

    // Capturar la imagen desde la cámara
    private async Task CaptureImage()
    {
        try
        {
            // Capturar imagen desde el elemento de video
            var base64Image = await JSRuntime.InvokeAsync<string>("captureImage", "videoElement", "canvasElement");

            // Convertir Base64 a SKBitmap para procesar
            var skBitmap = FaceRecognizerService.ConvertBase64ToSkBitmap(base64Image);

            // Detectar rostros en la imagen capturada
            var detectedFaces = FaceRecognizerService.DetectFaces(skBitmap);

            if (detectedFaces.Length > 0)
            {
                // Recortar y redimensionar el primer rostro detectado
                var croppedFace = FaceRecognizerService.CropFace(skBitmap, detectedFaces[0]);
                var resizedFace = FaceRecognizerService.ResizeBitmap(croppedFace, 100, 100);

                // Convertir el rostro redimensionado a Base64 para previsualización
                ImagePreview = FaceRecognizerService.ConvertSkBitmapToBase64(resizedFace);

                StatusMessage = "Rostro capturado correctamente.";
            }
            else
            {
                StatusMessage = "No se detectaron rostros en la imagen.";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error al capturar la imagen: {ex.Message}";
        }
    }

    // Guardar usuario en la base de datos
    private async Task RegisterUser()
    {
        if (string.IsNullOrWhiteSpace(ImagePreview))
        {
            StatusMessage = "Debe capturar un rostro antes de guardar.";
            return;
        }

        try
        {
            // Convertir la imagen de previsualización (Base64) a bytes
            byte[] imageBytes = Convert.FromBase64String(ImagePreview.Replace("data:image/png;base64,", ""));

            // Guardar usuario en la base de datos
            using var connection = DatabaseHandler.GetConnection();
            await connection.OpenAsync();

            string query = @"
                INSERT INTO Users (Name, LastName, Email, RegisteredDate, Image)
                VALUES (@Name, @LastName, @Email, @RegisteredDate, @Image)";
            using var command = new SQLiteCommand(query, connection);

            command.Parameters.AddWithValue("@Name", User.Name);
            command.Parameters.AddWithValue("@LastName", User.LastName);
            command.Parameters.AddWithValue("@Email", User.Email);
            command.Parameters.AddWithValue("@RegisteredDate", DateTime.Now);
            command.Parameters.AddWithValue("@Image", imageBytes);

            await command.ExecuteNonQueryAsync();

            StatusMessage = "Usuario registrado correctamente.";
            User = new UserModel(); // Reinicia el formulario
            ImagePreview = null;
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error al guardar el usuario: {ex.Message}";
        }
    }
}
