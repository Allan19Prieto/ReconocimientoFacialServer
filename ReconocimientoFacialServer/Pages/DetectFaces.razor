@page "/detect-faces"
@using System.Data.SQLite;
@using ReconocimientoFacialServer.Services;
@using ReconocimientoFacialServer.Data;
@using ReconocimientoFacialServer.Models;
@inject FaceRecognizerService FaceRecognizerService;
@inject DatabaseHandler DatabaseHandler;
@inject IJSRuntime JSRuntime;

<h3>Prueba de Reconocimiento Facial</h3>

<div>
    <video id="videoElement" autoplay style="border: 1px solid black; width: 320px; height: 240px;"></video>
    <canvas id="canvasElement" style="display: none;" width="320" height="240"></canvas>
</div>

<p>@RecognitionResult</p>
<button @onclick="StartCamera">Iniciar Cámara</button>
<button @onclick="CaptureAndCompare">Capturar y Comparar</button>

@code {
    private string RecognitionResult = "Esperando...";
    private Dictionary<int, UserDescriptorModel> UserDescriptors = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUserDescriptors();
    }

    private async Task StartCamera()
    {
        await JSRuntime.InvokeVoidAsync("startCamera", "videoElement");
    }

    private async Task LoadUserDescriptors()
    {
        try
        {
            using var connection = DatabaseHandler.GetConnection();
            await connection.OpenAsync();

            string query = "SELECT UserId, Name, Descriptor FROM FaceDescriptors INNER JOIN Users ON FaceDescriptors.UserId = Users.UserId;";
            using var command = new SQLiteCommand(query, connection);

            using var reader = await command.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                var userId = reader.GetInt32(0);
                var userName = reader.GetString(1);
                var descriptorBlob = (byte[])reader["Descriptor"];
                var descriptor = ConvertBlobToFloatArray(descriptorBlob);

                UserDescriptors[userId] = new UserDescriptorModel
                    {
                        UserId = userId,
                        Name = userName,
                        Descriptor = descriptor
                    };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar descriptores: {ex.Message}");
        }
    }

    private async Task CaptureAndCompare()
    {
        try
        {
            // Capturar imagen desde la cámara
            var base64Image = await JSRuntime.InvokeAsync<string>("captureImage", "videoElement", "canvasElement");

            // Convertir imagen a Matrix y calcular descriptores
            var imageMatrix = FaceRecognizerService.ConvertBase64ToMatrix(base64Image);
            var detectedFaces = FaceRecognizerService.DetectFaces(imageMatrix);

            if (!detectedFaces.Any())
            {
                RecognitionResult = "No se detectaron rostros.";
                return;
            }

            var capturedDescriptor = FaceRecognizerService.ComputeDescriptors(imageMatrix, detectedFaces).FirstOrDefault();
            if (capturedDescriptor == null)
            {
                RecognitionResult = "No se pudo generar el descriptor del rostro.";
                return;
            }

            // Comparar el descriptor capturado con los almacenados
            var matchedUser = CompareWithStoredDescriptors(capturedDescriptor);

            RecognitionResult = matchedUser != null
                ? $"Usuario reconocido: {matchedUser.Name}"
                : "Usuario no reconocido.";
        }
        catch (Exception ex)
        {
            RecognitionResult = $"Error: {ex.Message}";
        }
    }

    private UserDescriptorModel? CompareWithStoredDescriptors(float[] capturedDescriptor)
    {
        double minDistance = double.MaxValue;
        UserDescriptorModel? matchedUser = null;

        foreach (var user in UserDescriptors.Values)
        {
            double distance = FaceRecognizerService.ComputeDistance(capturedDescriptor, user.Descriptor);
            if (distance < minDistance)
            {
                minDistance = distance;
                matchedUser = user;
            }
        }

        // Determinar si el usuario fue identificado dentro de un umbral
        return minDistance < 1.0 ? matchedUser : null;
    }

    private float[] ConvertBlobToFloatArray(byte[] blob)
    {
        if (blob.Length % sizeof(float) != 0)
            throw new ArgumentException("El tamaño del blob no es válido para un array de floats.");

        var floatArray = new float[blob.Length / sizeof(float)];
        Buffer.BlockCopy(blob, 0, floatArray, 0, blob.Length);
        return floatArray;
    }

    public class UserDescriptorModel
    {
        public int UserId { get; set; }
        public string Name { get; set; } = string.Empty;
        public float[] Descriptor { get; set; } = Array.Empty<float>();
    }
}
